{"version":3,"sources":["menu/Menu.js","soft-button/SoftButton.js","disk/Disk.js","track/Track.js","album-details/AlbumDetails.js","song/Song.js","songs-list/SongsList.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","items","children","className","noShadow","SoftButton","square","callme","isActive","classes","onClick","Disk","bg","isPlaying","style","backgroundImage","Track","AlbumDetails","song","title","singer","Song","id","pic","duration","update","key","src","alt","toFixed","SongsList","songs","songsList","map","App","useState","setIsPlaying","activeSong","setActiveSong","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95ff51fa.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Menu.styles.scss';\r\n\r\nexport default function Menu(props) {\r\n\r\n    const items = props.children ? props.children : <li>No data</li>;\r\n  return (\r\n    <div className={props.noShadow ? 'menu menu--noshadow' : 'menu'}>\r\n    <ul>\r\n      {\r\n          items\r\n      }  \r\n      </ul>     \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './SoftButton.scss';\r\nconst SoftButton = ({square,children,callme,isActive}) =>{\r\n    let classes = 'softButton';\r\n    if(square){\r\n       classes = ` ${classes} softButton--square`; \r\n    }\r\n    if(isActive){\r\n        classes = ` ${classes} softButton--active`; \r\n    }\r\n    return <div className={classes} onClick={callme} >\r\n        { children ? children : 'Button'}\r\n     </div>\r\n}\r\n\r\nexport default SoftButton;","import React from 'react'\r\nimport './Disk.scss';\r\nexport default function Disk({bg, isPlaying}) {\r\n  return (\r\n    <div className={ isPlaying ? 'disk disk--rotate': 'disk'} style={{backgroundImage:`url(${bg})`}}>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './Track.scss'\r\nexport default function Track() {\r\n  return (\r\n    <div className='track'>\r\n      <div className=\"track__progress\"></div>\r\n      <div className=\"track__details\">\r\n       <div className=\"track__details-totaltime\">1:36</div>\r\n       <div className=\"track__details-remainingtime\">4:36</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport './AlbumDetails.scss'\r\nexport default function AlbumDetails({song:{title, singer}}) {\r\n  return (\r\n    <div className=\"album\">\r\n    <p>from {title}</p>\r\n    <p>sung by {singer}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './Song.scss';\r\n\r\nexport default function Song({song:{id,title,pic,duration},update}) {\r\n  return (\r\n    <div className=\"song\" key={id} onClick={()=>update(id)}>\r\n           <img src={pic} alt={title}/>\r\n            <p>{title}</p>\r\n            <p>{(duration / 60).toFixed(2)}</p>\r\n        </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './SongsList.scss'\r\nimport Song from '../song/Song';\r\nexport default function SongsList({songs,update}) {\r\n \r\n const songsList = songs.map(song => {\r\n     return (\r\n       <Song song={song} key={song.id} update={update}/>\r\n     )\r\n });\r\n  return (\r\n    <div className=\"songslist\">\r\n      {\r\n          songsList\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React,{useState} from 'react';\r\nimport './App.css';\r\nimport Menu from './menu/Menu';\r\nimport SoftButton from './soft-button/SoftButton';\r\nimport { FaBars, FaMonument, FaPlay, FaPause, FaStepBackward,FaStepForward } from 'react-icons/fa';\r\nimport Disk from './disk/Disk';\r\nimport Track from './track/Track'\r\nimport AlbumDetails from './album-details/AlbumDetails';\r\nimport SongsList from './songs-list/SongsList';\r\nfunction App() {\r\n  const [isPlaying, setIsPlaying]  = useState(false);\r\n  const [activeSong, setActiveSong] = useState(1);\r\n  const togglePlay = () => setIsPlaying(!isPlaying);\r\n  const updateActiveSong = ( id ) => {\r\n    setActiveSong(id);\r\n  };\r\n  const songs = [\r\n    {\r\n        id:1,\r\n        title: 'Pranam',\r\n        singer:'Sunitha',\r\n        duration:500,\r\n        pic:'https://i.scdn.co/image/89b92c6b59131776c0cd8e5df46301ffcf36ed69'\r\n    },\r\n    {\r\n       id:2,\r\n       title: 'Varsham',\r\n       singer:'SPB',\r\n       duration:600,\r\n       pic:'https://images.pexels.com/photos/1370545/pexels-photo-1370545.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=150&w=150'\r\n   },\r\n   {\r\n       id:3,\r\n       title: 'Godavari',\r\n       singer:'Sunitha',\r\n       duration:500,\r\n       pic:'https://images.pexels.com/photos/92078/pexels-photo-92078.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=150&w=150'\r\n   },\r\n   {\r\n       id:4,\r\n       title: 'Pranam',\r\n       singer:'Sunitha',\r\n       duration:500,\r\n       pic:'https://images.pexels.com/photos/1001850/pexels-photo-1001850.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=150&w=150'\r\n   },\r\n   {\r\n      id:5,\r\n      title: 'Varsham',\r\n      singer:'SPB',\r\n      duration:600,\r\n      pic:'https://images.pexels.com/photos/6464/desk-technology-music-white.jpg?auto=compress&cs=tinysrgb&dpr=2&h=150&w=150'\r\n  },\r\n  {\r\n      id:6,\r\n      title: 'Godavari',\r\n      singer:'Sunitha',\r\n      duration:500,\r\n      pic:'https://images.pexels.com/photos/756242/pexels-photo-756242.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=150&w=150'\r\n  }\r\n]\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu noShadow>\r\n        <SoftButton square>\r\n          <FaMonument />\r\n        </SoftButton>\r\n        <SoftButton square>\r\n          <FaBars />\r\n        </SoftButton>\r\n      </Menu>\r\n      <Disk\r\n       isPlaying={isPlaying}\r\n        bg={songs[activeSong - 1].pic}\r\n      />\r\n      <Track/>\r\n      <AlbumDetails song={songs[activeSong - 1]}/>\r\n      <SongsList songs={songs} update={updateActiveSong}/>\r\n      <div className=\"controls\">\r\n        <Menu noShadow>\r\n          <SoftButton>\r\n            <FaStepBackward />\r\n          </SoftButton>\r\n          <SoftButton callme={togglePlay} isActive={isPlaying} >\r\n          { isPlaying ? <FaPause/>:<FaPlay />}\r\n          </SoftButton>\r\n          <SoftButton>\r\n            <FaStepForward />\r\n          </SoftButton>\r\n        </Menu></div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}